<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtf_1_1Taskflow" kind="class" language="C++" prot="public">
    <compoundname>tf::Taskflow</compoundname>
    <basecompoundref refid="classtf_1_1FlowBuilder" prot="public" virt="non-virtual">tf::FlowBuilder</basecompoundref>
    <includes refid="core_2taskflow_8hpp" local="no">taskflow.hpp</includes>
    <innerclass refid="structtf_1_1Taskflow_1_1Dumper" prot="private">tf::Taskflow::Dumper</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1Taskflow_1acd2b8699ab7559c0da687cd775e2c778" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Topology</definition>
        <argsstring></argsstring>
        <name>Topology</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="63" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Taskflow_1a763b2f90bc53f92d680a635fe28e858e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Executor</definition>
        <argsstring></argsstring>
        <name>Executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="64" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Taskflow_1a61184f9bd9c801d0a5eccecfdbddc641" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FlowBuilder</definition>
        <argsstring></argsstring>
        <name>FlowBuilder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="65" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1Taskflow_1aa4f464efc6b69669c093d6d5218150db" prot="private" static="no" mutable="yes">
        <type><ref refid="cpp/thread/mutex" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::mutex</ref></type>
        <definition>std::mutex tf::Taskflow::_mutex</definition>
        <argsstring></argsstring>
        <name>_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="169" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Taskflow_1a5f4243689c241ccb5ca4316211d21a62" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string tf::Taskflow::_name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="171" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Taskflow_1a78a7df50a7d2aeacb7c5c6948f5dd94a" prot="private" static="no" mutable="no">
        <type>Graph</type>
        <definition>Graph tf::Taskflow::_graph</definition>
        <argsstring></argsstring>
        <name>_graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="173" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Taskflow_1a7016553915989a1725addcf7d4e975bf" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/queue" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::queue</ref>&lt; <ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; Topology &gt; &gt;</type>
        <definition>std::queue&lt;std::shared_ptr&lt;Topology&gt; &gt; tf::Taskflow::_topologies</definition>
        <argsstring></argsstring>
        <name>_topologies</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="175" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Taskflow_1ad5d60317ed24250a1e1f919e65572d34" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="cpp/container/list" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::list</ref>&lt; <ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &gt;::iterator &gt;</type>
        <definition>std::optional&lt;std::list&lt;Taskflow&gt;::iterator&gt; tf::Taskflow::_satellite</definition>
        <argsstring></argsstring>
        <name>_satellite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="177" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1Taskflow_1a7242a74dcb16731b4e40816647b93305" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::Taskflow::Taskflow</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Taskflow</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>constructs a taskflow with the given name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="77" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1ade7fc641d136a3f8c96682c08040626a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::Taskflow::Taskflow</definition>
        <argsstring>()</argsstring>
        <name>Taskflow</name>
        <briefdescription>
<para>constructs a taskflow </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="82" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="191" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1afd790de6db6d16ddf4729967c1edebb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::Taskflow::Taskflow</definition>
        <argsstring>(Taskflow &amp;&amp;rhs)</argsstring>
        <name>Taskflow</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>constructs a taskflow from a moved taskflow </para>        </briefdescription>
        <detaileddescription>
<para>Move a running taskflow can result in undefined behavior. You should only move a taskflow to another if it is not being run by an executor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="91" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="195" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1aa4957a41e63e1d1a6f77c540d70d04fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
        <definition>Taskflow &amp; tf::Taskflow::operator=</definition>
        <argsstring>(Taskflow &amp;&amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>move assignment operator </para>        </briefdescription>
        <detaileddescription>
<para>Move a running taskflow can result in undefined behavior. You should only move a taskflow to another if it is not being run by an executor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="100" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="208" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1aa966a69493ecc8ecb9131ef3c5354b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::Taskflow::~Taskflow</definition>
        <argsstring>()=default</argsstring>
        <name>~Taskflow</name>
        <briefdescription>
<para>default destructor </para>        </briefdescription>
        <detaileddescription>
<para>When the destructor is called, all tasks and their associated data (e.g., captured data) will be destroyed. It is your responsibility to ensure all submitted execution of this taskflow have completed before destroying it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1ac433018262e44b12c4cc9f0c4748d758" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Taskflow::dump</definition>
        <argsstring>(std::ostream &amp;ostream) const</argsstring>
        <name>dump</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>ostream</declname>
        </param>
        <briefdescription>
<para>dumps the taskflow to a DOT format through a <ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> target </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="115" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="261" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1a9c4900da1831dce708664a06b3e3a3fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string tf::Taskflow::dump</definition>
        <argsstring>() const</argsstring>
        <name>dump</name>
        <briefdescription>
<para>dumps the taskflow to a <ref refid="cpp/string/basic_string" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> of DOT format </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="120" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="254" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1af4f03bca084deb5c2228ac8936d33649" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Taskflow::num_tasks</definition>
        <argsstring>() const</argsstring>
        <name>num_tasks</name>
        <briefdescription>
<para>queries the number of tasks </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="125" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1a224301842d94c44fd7fe99d8ac2ba241" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Taskflow::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>queries the emptiness of the taskflow </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="130" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1ad5706e5819aa01a63c4aa2e3485546b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Taskflow::name</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>name</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <briefdescription>
<para>assigns a name to the taskflow </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="135" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1a911edd95acc1322433bddfcfeaf2ccb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
        <definition>const std::string &amp; tf::Taskflow::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
<para>queries the name of the taskflow </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="140" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1a1f00bbe72a1553c9656ecae4d98bb9af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Taskflow::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>clears the associated task dependency graph </para>        </briefdescription>
        <detaileddescription>
<para>When you clear a taskflow, all tasks and their associated data (e.g., captured data) will be destroyed. You should never clean a taskflow while it is being run by an executor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="149" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="221" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1a6350d0d6653ae9ae7b94c35e42fffe07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Taskflow::for_each_task</definition>
        <argsstring>(V &amp;&amp;visitor) const</argsstring>
        <name>for_each_task</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>applies a visitor to each task in the taskflow </para>        </briefdescription>
        <detaileddescription>
<para>A visitor is a callable that takes an argument of type <ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref> and returns nothing. The following example iterates each task in a taskflow and prints its name:</para><para><programlisting filename=".cpp"><codeline><highlight class="normal">taskflow.<ref refid="classtf_1_1Taskflow_1a6350d0d6653ae9ae7b94c35e42fffe07" kindref="member">for_each_task</ref>([](<ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>task){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>task.<ref refid="classtf_1_1Task_1a08ada0425b490997b6ff7f310107e5e3" kindref="member">name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="165" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="247" bodyend="251"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1Taskflow_1acceeeb821b579c557b3251a72ab244cc" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Taskflow::_dump</definition>
        <argsstring>(std::ostream &amp;, const Taskflow *) const</argsstring>
        <name>_dump</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <defname>os</defname>
        </param>
        <param>
          <type>const <ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> *</type>
          <defname>top</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="179" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="268" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1a22bd6faed11509c504c4a9cb8cb81fd6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Taskflow::_dump</definition>
        <argsstring>(std::ostream &amp;, const Node *, Dumper &amp;) const</argsstring>
        <name>_dump</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <defname>os</defname>
        </param>
        <param>
          <type>const Node *</type>
          <defname>node</defname>
        </param>
        <param>
          <type>Dumper &amp;</type>
          <defname>dumper</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="180" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="290" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Taskflow_1a10a181b318ed9abe65f4a5dd0a4d556a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Taskflow::_dump</definition>
        <argsstring>(std::ostream &amp;, const Graph &amp;, Dumper &amp;) const</argsstring>
        <name>_dump</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <defname>os</defname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <defname>graph</defname>
        </param>
        <param>
          <type>Dumper &amp;</type>
          <defname>dumper</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="181" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="378" bodyend="411"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>main entry to create a task dependency graph </para>    </briefdescription>
    <detaileddescription>
<para>A taskflow manages a task dependency graph where each task represents a callable object (e.g., <ulink url="https://en.cppreference.com/w/cpp/language/lambda">lambda</ulink>, <ulink url="https://en.cppreference.com/w/cpp/utility/functional/function">std::function</ulink>) and an edge represents a dependency between two tasks. A task is one of the following types:</para><para><orderedlist>
<listitem><para>static task : the callable constructible from <computeroutput>std::function&lt;void()&gt;</computeroutput> </para></listitem><listitem><para>dynamic task : the callable constructible from <computeroutput>std::function&lt;void(tf::Subflow&amp;)&gt;</computeroutput> </para></listitem><listitem><para>condition task: the callable constructible from <computeroutput>std::function&lt;int()&gt;</computeroutput> </para></listitem><listitem><para>module task : the task constructed from <ref refid="classtf_1_1FlowBuilder_1a0a01192f4f92c15380a4f259e2fec2d9" kindref="member">tf::Taskflow::composed_of</ref></para></listitem><listitem><para>cudaFlow task: the callable constructible from <computeroutput>std::function&lt;void(tf::cudaFlow&amp;)&gt;</computeroutput> or <computeroutput>std::function&lt;void(tf::cudaFlowCapturer&amp;)&gt;</computeroutput> </para></listitem><listitem><para>syclFlow task: the callable constructible from <computeroutput>std::function&lt;void(tf::syclFlow&amp;)&gt;</computeroutput> </para></listitem></orderedlist>
</para><para>Each task is a basic computation unit and is run by one worker thread from an executor. The following example creates a simple taskflow graph of four static tasks, <computeroutput>A</computeroutput>, <computeroutput>B</computeroutput>, <computeroutput>C</computeroutput>, and <computeroutput>D</computeroutput>, where <computeroutput>A</computeroutput> runs before <computeroutput>B</computeroutput> and <computeroutput>C</computeroutput> and <computeroutput>D</computeroutput> runs after <computeroutput>B</computeroutput> and <computeroutput>C</computeroutput>.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref><sp/>taskflow(</highlight><highlight class="stringliteral">&quot;simple&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>A<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TaskA\n&quot;</highlight><highlight class="normal">;<sp/>});<sp/></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>B<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TaskB\n&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>C<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TaskC\n&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>D<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TaskD\n&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A.<ref refid="classtf_1_1Task_1a8c78c453295a553c1c016e4062da8588" kindref="member">precede</ref>(B,<sp/>C);<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>runs<sp/>before<sp/>B<sp/>and<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">D.<ref refid="classtf_1_1Task_1a331b1b726555072e7c7d10941257f664" kindref="member">succeed</ref>(B,<sp/>C);<sp/><sp/></highlight><highlight class="comment">//<sp/>D<sp/>runs<sp/>after<sp/><sp/>B<sp/>and<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow).wait();<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
</programlisting></para><para>Please refer to <ref refid="Cookbook" kindref="compound">Cookbook</ref> to learn more about each task type and how to submit a taskflow to an executor. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="154">
        <label>tf::FlowBuilder</label>
        <link refid="classtf_1_1FlowBuilder"/>
      </node>
      <node id="153">
        <label>tf::Taskflow</label>
        <link refid="classtf_1_1Taskflow"/>
        <childnode refid="154" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="156">
        <label>tf::FlowBuilder</label>
        <link refid="classtf_1_1FlowBuilder"/>
      </node>
      <node id="155">
        <label>tf::Taskflow</label>
        <link refid="classtf_1_1Taskflow"/>
        <childnode refid="156" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" line="61" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/taskflow.hpp" bodystart="61" bodyend="182"/>
    <listofallmembers>
      <member refid="classtf_1_1Taskflow_1acceeeb821b579c557b3251a72ab244cc" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>_dump</name></member>
      <member refid="classtf_1_1Taskflow_1a22bd6faed11509c504c4a9cb8cb81fd6" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>_dump</name></member>
      <member refid="classtf_1_1Taskflow_1a10a181b318ed9abe65f4a5dd0a4d556a" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>_dump</name></member>
      <member refid="classtf_1_1Taskflow_1a78a7df50a7d2aeacb7c5c6948f5dd94a" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>_graph</name></member>
      <member refid="classtf_1_1Taskflow_1aa4f464efc6b69669c093d6d5218150db" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>_mutex</name></member>
      <member refid="classtf_1_1Taskflow_1a5f4243689c241ccb5ca4316211d21a62" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>_name</name></member>
      <member refid="classtf_1_1Taskflow_1ad5d60317ed24250a1e1f919e65572d34" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>_satellite</name></member>
      <member refid="classtf_1_1Taskflow_1a7016553915989a1725addcf7d4e975bf" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>_topologies</name></member>
      <member refid="classtf_1_1Taskflow_1a1f00bbe72a1553c9656ecae4d98bb9af" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>clear</name></member>
      <member refid="classtf_1_1FlowBuilder_1a0a01192f4f92c15380a4f259e2fec2d9" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>composed_of</name></member>
      <member refid="classtf_1_1Taskflow_1ac433018262e44b12c4cc9f0c4748d758" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>dump</name></member>
      <member refid="classtf_1_1Taskflow_1a9c4900da1831dce708664a06b3e3a3fb" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>dump</name></member>
      <member refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>emplace</name></member>
      <member refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>emplace</name></member>
      <member refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>emplace</name></member>
      <member refid="classtf_1_1FlowBuilder_1a1f6118326ad434f6c839007a1a79fe1b" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>emplace</name></member>
      <member refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>emplace</name></member>
      <member refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>emplace</name></member>
      <member refid="classtf_1_1FlowBuilder_1afdf47fd1a358fb64f8c1b89e2a393169" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>emplace_on</name></member>
      <member refid="classtf_1_1FlowBuilder_1af7c878fa6f0c4539ab88c0a85e6052d8" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>emplace_on</name></member>
      <member refid="classtf_1_1Taskflow_1a224301842d94c44fd7fe99d8ac2ba241" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>empty</name></member>
      <member refid="classtf_1_1Taskflow_1a763b2f90bc53f92d680a635fe28e858e" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>Executor</name></member>
      <member refid="classtf_1_1Taskflow_1a61184f9bd9c801d0a5eccecfdbddc641" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>FlowBuilder</name></member>
      <member refid="classtf_1_1FlowBuilder_1a67d023d5493da1594a1d2eaea89da179" prot="protected" virt="non-virtual" ambiguityscope="tf::FlowBuilder::"><scope>tf::Taskflow</scope><name>FlowBuilder</name></member>
      <member refid="classtf_1_1FlowBuilder_1a564252001be679600b20ca9ed9920f6a" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>for_each</name></member>
      <member refid="classtf_1_1FlowBuilder_1ab8417b211b18bb1e0f45a049331f084d" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>for_each_index</name></member>
      <member refid="classtf_1_1Taskflow_1a6350d0d6653ae9ae7b94c35e42fffe07" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>for_each_task</name></member>
      <member refid="classtf_1_1FlowBuilder_1a90f3d9b9d6fcf4df8e7d7878dfdd130d" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>linearize</name></member>
      <member refid="classtf_1_1FlowBuilder_1a4ec89b554d15ad5fb96f4fdb10dbbb16" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>linearize</name></member>
      <member refid="classtf_1_1Taskflow_1ad5706e5819aa01a63c4aa2e3485546b9" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>name</name></member>
      <member refid="classtf_1_1Taskflow_1a911edd95acc1322433bddfcfeaf2ccb0" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>name</name></member>
      <member refid="classtf_1_1Taskflow_1af4f03bca084deb5c2228ac8936d33649" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>num_tasks</name></member>
      <member refid="classtf_1_1Taskflow_1aa4957a41e63e1d1a6f77c540d70d04fa" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>operator=</name></member>
      <member refid="classtf_1_1FlowBuilder_1acab0b4ac82260f47fdb36a3244ee3aaf" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>placeholder</name></member>
      <member refid="classtf_1_1FlowBuilder_1ad999cd75045db225a42d5881d6db1223" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>reduce</name></member>
      <member refid="classtf_1_1FlowBuilder_1af4848ab51fa3bf5525af58e2440b01c1" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>sort</name></member>
      <member refid="classtf_1_1FlowBuilder_1a559afa5066782bc6c38738260e3d4c2e" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>sort</name></member>
      <member refid="classtf_1_1Taskflow_1a7242a74dcb16731b4e40816647b93305" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>Taskflow</name></member>
      <member refid="classtf_1_1Taskflow_1ade7fc641d136a3f8c96682c08040626a" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>Taskflow</name></member>
      <member refid="classtf_1_1Taskflow_1afd790de6db6d16ddf4729967c1edebb5" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>Taskflow</name></member>
      <member refid="classtf_1_1Taskflow_1acd2b8699ab7559c0da687cd775e2c778" prot="private" virt="non-virtual"><scope>tf::Taskflow</scope><name>Topology</name></member>
      <member refid="classtf_1_1FlowBuilder_1ad8d03524f15292610ebee63d53b89579" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>transform_reduce</name></member>
      <member refid="classtf_1_1Taskflow_1aa966a69493ecc8ecb9131ef3c5354b8e" prot="public" virt="non-virtual"><scope>tf::Taskflow</scope><name>~Taskflow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
